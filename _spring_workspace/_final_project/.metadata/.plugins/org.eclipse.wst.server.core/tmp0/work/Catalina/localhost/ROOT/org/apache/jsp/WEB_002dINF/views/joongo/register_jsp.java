/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2023-12-23 15:20:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.joongo;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/Users/hayeonkim/_spring_workspace/_final_project/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/finalProject/WEB-INF/lib/spring-security-taglibs-5.5.3.jar!/META-INF/security.tld", Long.valueOf(1634555638000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-security-taglibs-5.5.3.jar", Long.valueOf(1698937559254L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fsec_005fauthentication_0026_005fvar_005fproperty_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fsec_005fauthentication_0026_005fvar_005fproperty_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fsec_005fauthentication_0026_005fvar_005fproperty_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<link rel=\"stylesheet\" href=\"../resources/css/joongoBoard.css\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../common/header.jsp", out, false);
      out.write('\n');
      if (_jspx_meth_sec_005fauthentication_005f0(_jspx_page_context))
        return;
      out.write('\n');
      if (_jspx_meth_sec_005fauthentication_005f1(_jspx_page_context))
        return;
      out.write("\n");
      out.write("<div class=\"banner\">\n");
      out.write("</div>\n");
      out.write("<div class=\"bodyContainer\">\n");
      out.write("	<form action=\"/joongo/register\" method=\"post\" enctype=\"multipart/form-data\">\n");
      out.write("		<input type=\"hidden\" name=\"proEmail\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${authEmail}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("		<input type=\"hidden\" name=\"proNickName\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${authNick}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("		<input type=\"hidden\" name=\"proCategory\" value=\"joongo\">\n");
      out.write("\n");
      out.write("	    <div class=\"form\">\n");
      out.write("	    	<label for=\"title\">제목</label>\n");
      out.write("			<input type=\"text\" id=\"title\" name=\"proTitle\" placeholder=\"제목을 입력해 주세요\" required=\"required\">\n");
      out.write("		</div>\n");
      out.write("		\n");
      out.write("		<div class=\"form\">\n");
      out.write("			<label for=\"price\">가격</label>\n");
      out.write("			<input type=\"number\" min=\"0\" id=\"price\" name=\"proPrice\" placeholder=\"가격을 입력해 주세요\" required=\"required\">\n");
      out.write("		</div>\n");
      out.write("	\n");
      out.write("		<div class=\"form\">\n");
      out.write("			<label for=\"menu\">카테고리</label>\n");
      out.write("			");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "menuSelect.jsp", out, false);
      out.write("\n");
      out.write("		</div>\n");
      out.write("	    \n");
      out.write("		<div class=\"form\">\n");
      out.write("			<label for=\"dynamicTextarea\">내용</label>\n");
      out.write("			<textarea id=\"dynamicTextarea\" name=\"proContent\" required=\"required\"></textarea>\n");
      out.write("		</div>\n");
      out.write("		\n");
      out.write("		<!-- 지도 영역 -->\n");
      out.write("		<div class=\"form\">\n");
      out.write("		<label>지도</label>\n");
      out.write("		<div class=\"form fileForm\">\n");
      out.write("			<input type=\"text\" name=\"proFullAddr\" id=\"proFullAddr\" readonly=\"readonly\" class=\"fileInput\" placeholder=\"거래 장소를 등록해 주세요\"> \n");
      out.write("			<input name=\"proDetailAddr\" id=\"proDetailAddr\" class=\"fileInput\" style=\"display:none\" placeholder=\"상세 주소\"> \n");
      out.write("			<button type=\"button\" id=\"addr\" class=\"fileBtn\">주소추가</button>\n");
      out.write("		</div>\n");
      out.write("		\n");
      out.write("		<div id=\"map\" style=\"width:100%;height:250px;\"></div>\n");
      out.write("		<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=d0bcf962e4604f2fbb0f443f01d101a4&libraries=services\"></script>\n");
      out.write("		<script>\n");
      out.write("		var mapContainer = document.getElementById('map'); //지도를 표시할 div \n");
      out.write("		var mapOption = {\n");
      out.write("		    center: new kakao.maps.LatLng(37.450292, 126.702921), //지도의 중심좌표\n");
      out.write("		    level: 3 //지도의 확대 레벨\n");
      out.write("		};  \n");
      out.write("		\n");
      out.write("		//지도 생성\n");
      out.write("		var map = new kakao.maps.Map(mapContainer, mapOption); \n");
      out.write("		\n");
      out.write("		//기본 마커 변경\n");
      out.write("		var imageSrc = '/resources/image/marker.png';\n");
      out.write("		var imageSize = new kakao.maps.Size(50, 55);\n");
      out.write("		var imageOption = {offset: new kakao.maps.Point(23, 55)};\n");
      out.write("		\n");
      out.write("		//마커 이미지 생성\n");
      out.write("		var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imageOption),\n");
      out.write("		markerPosition = new kakao.maps.LatLng(37.450292, 126.702921); //마커 표시 위치(기본 위치)\n");
      out.write("		\n");
      out.write("		//마커 생성\n");
      out.write("		var marker = new kakao.maps.Marker({\n");
      out.write("		    position: markerPosition, \n");
      out.write("		    image: markerImage //마커이미지 설정 \n");
      out.write("		});\n");
      out.write("		//지도 위 마커 표시\n");
      out.write("		marker.setMap(map);  	\n");
      out.write("		\n");
      out.write("		//입력 주소-좌표 변환 객체 생성\n");
      out.write("		var geocoder = new kakao.maps.services.Geocoder();\n");
      out.write("		\n");
      out.write("		//주소 좌표 검색\n");
      out.write("		function searchAndDisplay() {\n");
      out.write("	        document.getElementById('proDetailAddr').value = '';\n");
      out.write("		    var address = document.getElementById('addr').value;\n");
      out.write("		    \n");
      out.write("		    //주소 값이 null이 아닌 경우에만 실행\n");
      out.write("		    if (address) {\n");
      out.write("		    	marker.setMap(null);\n");
      out.write("		    	\n");
      out.write("		        //주소로 좌표 검색\n");
      out.write("		        geocoder.addressSearch(address, function(result, status) {\n");
      out.write("		            //정상적으로 검색 완료됐으면 \n");
      out.write("		            if (status === kakao.maps.services.Status.OK) {\n");
      out.write("		                var coords = new kakao.maps.LatLng(result[0].y, result[0].x);\n");
      out.write("		\n");
      out.write("		                //결과값으로 받은 위치를 마커로 표시\n");
      out.write("		                var marker = new kakao.maps.Marker({\n");
      out.write("		                    map: map,\n");
      out.write("		                    position: coords,\n");
      out.write("		                    image: markerImage\n");
      out.write("		                });\n");
      out.write("		\n");
      out.write("		                //지도의 중심을 결과값으로 받은 위치로 이동\n");
      out.write("		                map.setCenter(coords);\n");
      out.write("		                \n");
      out.write("		             	//proFullAddr 요소 값을 변경\n");
      out.write("		             	document.getElementById('proFullAddr').style.width = '301.9px';\n");
      out.write("		                document.getElementById('proFullAddr').value = address;\n");
      out.write("		                proDetailAddr.classList.remove('hidden');	            \n");
      out.write("		            }\n");
      out.write("		        });\n");
      out.write("		    }\n");
      out.write("		}\n");
      out.write("		</script>\n");
      out.write("		</div>\n");
      out.write("		\n");
      out.write("		<!-- 파일 -->\n");
      out.write("		<label>이미지</label>\n");
      out.write("		<div class=\"form fileForm\" id=\"fileForm\">\n");
      out.write("			<input type=\"file\" class=\"form-control\" name=\"files\" id=\"files\" multiple=\"multiple\" style=\"display:none;\">\n");
      out.write("			<input type=\"text\" readonly=\"readonly\" class=\"fileInput\" placeholder=\"20MB 미만의 이미지를 업로드 해주세요\"> \n");
      out.write("			<button type=\"button\" id=\"trigger\" class=\"fileBtn\">파일첨부</button>\n");
      out.write("		</div>\n");
      out.write("		<!-- 첨부파일 표시 영역 -->\n");
      out.write("		<div class=\"fileZone\" id=\"fileZone\" style=\"display:none\">\n");
      out.write("		\n");
      out.write("		</div>\n");
      out.write("		\n");
      out.write("		<div class=\"lastBtnArea\">\n");
      out.write("			<a href=\"/joongo/list\"><button type=\"button\" class=\"cancelBtn\">취소</button></a>\n");
      out.write("			<button type=\"submit\" class=\"regBtn\" id=\"regBtn\">작성</button>\n");
      out.write("		</div>\n");
      out.write("	</form>\n");
      out.write("</div>\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../common/footer.jsp", out, false);
      out.write("\n");
      out.write("<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("//지도 api\n");
      out.write("document.getElementById('addr').addEventListener('click', ()=>{\n");
      out.write("    //카카오 지도 발생\n");
      out.write("    new daum.Postcode({\n");
      out.write("        oncomplete: function(data) { //선택시 입력값 세팅\n");
      out.write("            console.log(data.address);\n");
      out.write("            document.getElementById('addr').value = data.address;\n");
      out.write("            // 주소가 설정되자마자 검색 함수 호출\n");
      out.write("            searchAndDisplay();\n");
      out.write("        }\n");
      out.write("    }).open();\n");
      out.write("});\n");
      out.write("</script>\n");
      out.write("<script type=\"text/javascript\" src=\"/resources/js/productFile.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"/resources/js/abjustTextareaRows.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"/resources/js/checkFormBlank.js\"></script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_sec_005fauthentication_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  sec:authentication
    org.springframework.security.taglibs.authz.AuthenticationTag _jspx_th_sec_005fauthentication_005f0 = (org.springframework.security.taglibs.authz.AuthenticationTag) _005fjspx_005ftagPool_005fsec_005fauthentication_0026_005fvar_005fproperty_005fnobody.get(org.springframework.security.taglibs.authz.AuthenticationTag.class);
    boolean _jspx_th_sec_005fauthentication_005f0_reused = false;
    try {
      _jspx_th_sec_005fauthentication_005f0.setPageContext(_jspx_page_context);
      _jspx_th_sec_005fauthentication_005f0.setParent(null);
      // /WEB-INF/views/joongo/register.jsp(13,0) name = property type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_sec_005fauthentication_005f0.setProperty("principal.mvo.memEmail");
      // /WEB-INF/views/joongo/register.jsp(13,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_sec_005fauthentication_005f0.setVar("authEmail");
      int _jspx_eval_sec_005fauthentication_005f0 = _jspx_th_sec_005fauthentication_005f0.doStartTag();
      if (_jspx_th_sec_005fauthentication_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fsec_005fauthentication_0026_005fvar_005fproperty_005fnobody.reuse(_jspx_th_sec_005fauthentication_005f0);
      _jspx_th_sec_005fauthentication_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_sec_005fauthentication_005f0, _jsp_getInstanceManager(), _jspx_th_sec_005fauthentication_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_sec_005fauthentication_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  sec:authentication
    org.springframework.security.taglibs.authz.AuthenticationTag _jspx_th_sec_005fauthentication_005f1 = (org.springframework.security.taglibs.authz.AuthenticationTag) _005fjspx_005ftagPool_005fsec_005fauthentication_0026_005fvar_005fproperty_005fnobody.get(org.springframework.security.taglibs.authz.AuthenticationTag.class);
    boolean _jspx_th_sec_005fauthentication_005f1_reused = false;
    try {
      _jspx_th_sec_005fauthentication_005f1.setPageContext(_jspx_page_context);
      _jspx_th_sec_005fauthentication_005f1.setParent(null);
      // /WEB-INF/views/joongo/register.jsp(14,0) name = property type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_sec_005fauthentication_005f1.setProperty("principal.mvo.memNickName");
      // /WEB-INF/views/joongo/register.jsp(14,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_sec_005fauthentication_005f1.setVar("authNick");
      int _jspx_eval_sec_005fauthentication_005f1 = _jspx_th_sec_005fauthentication_005f1.doStartTag();
      if (_jspx_th_sec_005fauthentication_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fsec_005fauthentication_0026_005fvar_005fproperty_005fnobody.reuse(_jspx_th_sec_005fauthentication_005f1);
      _jspx_th_sec_005fauthentication_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_sec_005fauthentication_005f1, _jsp_getInstanceManager(), _jspx_th_sec_005fauthentication_005f1_reused);
    }
    return false;
  }
}
