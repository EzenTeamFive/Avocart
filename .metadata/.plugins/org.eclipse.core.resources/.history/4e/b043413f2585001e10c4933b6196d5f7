document.getElementById("cmtPostBtn").addEventListener('click', ()=>{
    const cmtText = document.getElementById('cmtText').value;
    const cmtWriter = document.getElementById('cmtWriter').innerText; 
    const cmtEmail = document.getElementById('cmtEmail').value;

    if(cmtText == "" || cmtText == null){ //댓글을 안 적었을 때
        alert("댓글을 입력해주세요.");
        document.getElementById('cmtText').focus();
        return false; //메서드 종료
    }else{
        let cmtData = {
            cmtBno : bnoVal, //jsp에서 보내준 값
            cmtEmail : cmtEmail,
            cmtNickName : cmtWriter,
            cmtContent : cmtText
        };
        console.log(cmtData);
        
        //전송 function
        postCommentToServer(cmtData).then(result => {
            if(result == 1){
                alert("댓글 등록 성공");
                //댓글 등록 후 인풋 빈값으로 만들어주기
                document.getElementById('cmtText').value = '';
            }

            //화면에 뿌리기
            spreadCommentList(bnoVal);
        })
    }//if문
})

//댓글 전송 메서드
async function postCommentToServer(cmtData){
    try{
        const url ="/communityCmt/post"; 
        const config = { 
            method : "post",
            headers : { 
                'Content-type' : 'application/json; charset=utf-8'
            },
            body : JSON.stringify(cmtData) 
        };

        const resp = await fetch(url, config);
        const result = await resp.text(); 
        return result;

    }catch(err){
        console.log(err);
    }
}

//서버에 댓글 리스트를 달라고 요청
async function getCommentListFromServer(bno){
    try{
        const resp = await fetch('/communityCmt/'+bno);
        const result = await resp.json(); 
        return result; 
        
    }catch(err){
        console.log(err);
    }
}

//화면에 뿌리기
function spreadCommentList(bno){
    getCommentListFromServer(bno).then(result => {
        console.log(result); 
        const ul = document.getElementById('cmtListArea'); //댓글 영역을 감싸는 ul
        if(result.length > 0){ //댓글이 있다면
            ul.innerHTML = ""; //jsp에 임시로 넣어둔 댓글 표시영역을 지우고, 비어있는 값으로 바꿔버리기
            for(let cvo of result){
                let str = `<li class="list-group-item" data-cmtcno="${cvo.cmtCno}">`;
                str += `<div>`; 

                str += `<div class="fw-bold"><i class="bi bi-person-circle"></i>${cvo.cmtNickName}`;
                str += `<span class="badge rounded-pill text-bg-success">${cvo.cmtModAt}</span>`;
                //수정, 삭제 버튼
                str += `<div class="dropdown">
                            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            ...
                            </button>
                            <ul class="dropdown-menu">
                                <a class="dropdown-item modBtn" href="#" data-bs-toggle="modal" data-bs-target="#myModal">수정</a>
                                <a class="dropdown-item delBtn" href="#">삭제</a>
                            </ul>
                        </div>`
                str += `</div>`;

                str += `<div class="cmCon">${cvo.cmtContent}</div>`;

                str += `<div><a href="#">답글쓰기</a></div>`;

                str += `</div></li></ul>`;
                
                ul.innerHTML += str;
            }
        }else{
            let str = `<li>Comment List Empty</li>`;
            ul.innerHTML = str;
        }
    })
}

//수정
async function editCommentToServer(cmtModData){
    try{
        const url = '/communityCmt/'+cmtModData.cmtCno;
        const config = {
            method : 'put',
            headers : {
                'content-type' : 'application/json; charset=utf-8'
            },
            body : JSON.stringify(cmtModData)
        };

        const resp = await fetch(url, config);
        const result = await resp.text();
        return result;
        
    }catch(err){
        console.log(err);
    }
}

//삭제
async function removeCommentToServer(cno){
    try{
        const url = '/communityCmt/'+cno;
        const config = {
            method : 'delete',
        };

        const resp = await fetch(url, config);
        const result = await resp.text();
        return result;

    }catch(err){
        console.log(err);
    }
}

document.addEventListener('click', (e)=>{
    console.log(e.target);
    //수정버튼 클릭시
    if(e.target.classList.contains('modBtn')){
        console.log('수정버튼 클릭!');
        let li = e.target.closest('li');
        //nextSibling() : 같은 부모의 다음 형제 객체를 반환 => ${cvo.content}
        let cmtText = li.querySelector('.fw-bold').nextSibling;
        console.log(cmtText);
        //기존 내용 모달창에 반영
        document.getElementById('cmtTextMod').value = cmtText.innerText; 
        //value는 input태그에만 사용
        //nodeValue = innerText(div로 쌓여있을 때)
        //cmtModBtn에 data-cno 달기 
        console.log(li.dataset.cmtcno);
        document.getElementById('cmtModBtn').setAttribute('data-cmtCno', li.dataset.cmtcno);
        //dataset 대문자 인식X 소문자로만
    //모달창의 수정버튼 클릭시
    }else if(e.target.id == 'cmtModBtn'){
        let cmtModData = {
            cmtCno : e.target.dataset.cmtCno,
            cmtContent : document.getElementById('cmtTextMod').value
        };
        console.log(cmtModData);

        editCommentToServer(cmtModData).then(result => {
            if(parseInt(result) > 0){
                document.querySelector('.btn-close').click();
                alert("댓글 수정 성공");
            }
            spreadCommentList(bnoVal);
        })

    //삭제버튼 클릭시
    }else if(e.target.classList.contains('delBtn')){
        console.log('삭제버튼 클릭!');
    }


})