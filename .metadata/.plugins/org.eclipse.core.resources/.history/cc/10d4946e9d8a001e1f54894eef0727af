package com.avo.www.controller;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.avo.www.domain.FileVO;
import com.avo.www.domain.PagingVO;
import com.avo.www.domain.ProductBoardVO;
import com.avo.www.domain.StoreBoardDTO;
import com.avo.www.domain.StoreMenuVO;
import com.avo.www.handler.FileHandler;
import com.avo.www.handler.PagingHandler;
import com.avo.www.service.StoreBoardService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/store/*")
public class StoreBoardController {
	@Inject
	private StoreBoardService ssv;
	
	@Inject
	private FileHandler fh;
	
	@GetMapping("/register")
	public void register() {}
	
//	@PostMapping("/register")
//	public String register(RedirectAttributes re, ProductBoardVO pvo,
//			@RequestParam(name="files", required = false)MultipartFile[] files){
//		List<FileVO> flist = new ArrayList<FileVO>();
//
//		if(files[0].getSize() > 0) {
//			flist = fh.uploadFiles(files, "product");
//		}
//		
//		//alert 추가하기 위한 isOk
//		int isOk = ssv.insert(new StoreBoardDTO(pvo, flist));
//		return "redirect:/store/list";
//	}
	
	@PostMapping("/register")
	public String register(RedirectAttributes re, ProductBoardVO pvo, StoreMenuVO svo,
			@RequestParam(name="files", required = false)MultipartFile[] files){
		List<FileVO> flist = new ArrayList<FileVO>();

		if(files[0].getSize() > 0) {
			flist = fh.uploadFiles(files, "product");
		}
		
		//메뉴 처리
	    List<StoreMenuVO> menuList = new ArrayList<>();
	    for (int i = 0; i < StoreMenuVO.().length; i++) {
	        StoreMenuVO menu = new StoreMenuVO();
	        menu.setMenu(StoreMenuVO.g()[i]);
	        menu.setPrice(StoreMenuVO.getPrices()[i]);
	        menu.setExplain(StoreMenuVO.getExplains()[i]);
	        menuList.add(menu);
	    }
	    
		//alert 추가하기 위한 isOk
		int isOk = ssv.insert(new StoreBoardDTO(pvo, flist));
		return "redirect:/store/list";
	}
	
	@GetMapping("/list")
	public void list() {}	
	
	@GetMapping({"/detail", "/modify"})
	public void detail(Model m, @RequestParam("bno")long bno) {
		m.addAttribute("sdto", ssv.getDetail(bno));
	}
	
	@PostMapping("/modify")
	public String modify(RedirectAttributes re, ProductBoardVO pvo,
			@RequestParam(name="files", required = false)MultipartFile[] files){
		List<FileVO> flist = new ArrayList<FileVO>();
		if(files[0].getSize() > 0) {
			flist = fh.uploadFiles(files, "product");
		}
		
		int isOk = ssv.modify(new StoreBoardDTO(pvo,flist));	
		re.addAttribute("bno", pvo.getProBno());
		return "redirect:/store/detail"; 
	}
	
	@GetMapping("/remove")
	public String remove(RedirectAttributes re, @RequestParam("bno")long bno) {
		int isDel = ssv.remove(bno);
		return "redirect:/store/list";	
	}
	
	@GetMapping(value = "/{page}/{type}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<PagingHandler> spread(@PathVariable("page") int page, 
			@PathVariable("type") String type){
		PagingVO pgvo = new PagingVO(page, 8, type);
		return new ResponseEntity<PagingHandler>(
				ssv.getList(pgvo), HttpStatus.OK);
	}
	
	@GetMapping("/repost")
	public String repost(RedirectAttributes re, @RequestParam("bno")long bno) {
		int isOk = ssv.repost(bno);
		return "redirect:/store/list";	
	}
	
	//@GetMapping(value="/{bno}")
	
	@DeleteMapping(value="/file/{uuid}", produces = MediaType.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> removeFile(@PathVariable("uuid")String uuid){
		return ssv.removeFile(uuid) > 0? 
			new ResponseEntity<String>("1", HttpStatus.OK)
			 : new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
}
